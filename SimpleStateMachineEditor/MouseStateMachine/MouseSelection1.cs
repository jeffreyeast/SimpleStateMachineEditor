// ------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by SfsaGenerator
// </auto-generated>
// ------------------------------------------------------------------------------

namespace SimpleStateMachineEditor.MouseStateMachine
{
    using System;
    using System.Collections.Generic;
    using SimpleStateMachine;

    public abstract class MouseSelection : StateMachineWithoutReturnValueBase
    {
        public enum EventTypes
        {
            DraggingTransition,
            Esc,
            LeftButtonDown,
            LeftButtonDownOnIcon,
            LeftButtonUp,
            MouseMove,
            No,
            RightButtonUp,
            RightButtonUpOnIcon,
            Yes,
        };

        static readonly string[] EventTypeNames = new string[]
        {
            "DraggingTransition",
            "Esc",
            "LeftButtonDown",
            "LeftButtonDownOnIcon",
            "LeftButtonUp",
            "MouseMove",
            "No",
            "RightButtonUp",
            "RightButtonUpOnIcon",
            "Yes",

        };

        static readonly string[] StateNames = new string[]
        {
            "DraggingSelection",
            "DraggingSelectionBox",
            "Idle",
            "LeftButtonIsDown",
            "LeftButtonIsDownOnIcon",
            "TestingIfIconSelected",
            "TestingIfIconSelected2",
            "TestingIfTransition",
            "TestingShiftKey1",
            "TestingShiftKey2",
            "TestingShiftKey3",
            "TestingShiftKey4",

        };

        protected override int StartState => Array.IndexOf(StateNames, "Idle");

        static readonly StateTypes[] StateClassifications = new StateTypes[]
        {

            StateTypes.Normal,
            StateTypes.Normal,
            StateTypes.Normal,
            StateTypes.Normal,
            StateTypes.Normal,
            StateTypes.Normal,
            StateTypes.Normal,
            StateTypes.Normal,
            StateTypes.Normal,
            StateTypes.Normal,
            StateTypes.Normal,
            StateTypes.Normal,
        };

        /// <summary>
        /// Action Routines
        /// 
        /// You must override each of these action routines in your implementation.
        /// </summary>

        protected abstract void CancelDrag();
        protected abstract void ClearSelection();
        protected abstract void CommitDrag();
        protected abstract void DeselectDraggingIcon();
        protected abstract void DisplayIconContextMenu();
        protected abstract void DisplayStateMachineContextMenu();
        protected abstract void DragIcon();
        protected abstract void DragSelectionBox();
        protected abstract void EnableSelectionBox();
        protected abstract void RemoveSelectionBox();
        protected abstract void SaveDragOrigin();
        protected abstract void SelectDraggingIcon();
        protected abstract void SelectOccludedIcons();
        protected abstract void SelectStateMachine();
        protected abstract void StartDrag();
        protected abstract void StopTrackingMouse();
        protected abstract void TestIfTransitionIcon();
        protected abstract void TestIsIconSelected();
        protected abstract void TestShiftKeyState();
        protected abstract void TrackMouseMovement();


        protected override Transition<Action>[,] Transitions => _transitions;
        Transition<Action>[,] _transitions;

        public MouseSelection() : base (StateClassifications, EventTypeNames, StateNames)
        {
            _transitions = new Transition<Action>[,]
            {
                { // DraggingSelection(0)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // DraggingTransition(0)
                    new Transition<Action>(2, new Action[] { CancelDrag, StopTrackingMouse, }),  // Esc(1)
                    new Transition<Action>(0, new Action[] { }),  // LeftButtonDown(2)
                    new Transition<Action>(0, new Action[] { }),  // LeftButtonDownOnIcon(3)
                    new Transition<Action>(2, new Action[] { CommitDrag, StopTrackingMouse, }),  // LeftButtonUp(4)
                    new Transition<Action>(0, new Action[] { DragIcon, }),  // MouseMove(5)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // No(6)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // RightButtonUp(7)
                    new Transition<Action>(2, new Action[] { CommitDrag, StopTrackingMouse, }),  // RightButtonUpOnIcon(8)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // Yes(9)
                },
                { // DraggingSelectionBox(1)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // DraggingTransition(0)
                    new Transition<Action>(2, new Action[] { RemoveSelectionBox, StopTrackingMouse, }),  // Esc(1)
                    new Transition<Action>(1, new Action[] { }),  // LeftButtonDown(2)
                    new Transition<Action>(1, new Action[] { }),  // LeftButtonDownOnIcon(3)
                    new Transition<Action>(10, new Action[] { RemoveSelectionBox, StopTrackingMouse, TestShiftKeyState, }),  // LeftButtonUp(4)
                    new Transition<Action>(1, new Action[] { DragSelectionBox, }),  // MouseMove(5)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // No(6)
                    new Transition<Action>(2, new Action[] { RemoveSelectionBox, StopTrackingMouse, SelectStateMachine, DisplayStateMachineContextMenu, }),  // RightButtonUp(7)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // RightButtonUpOnIcon(8)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // Yes(9)
                },
                { // Idle(2)
                    new Transition<Action>(0, new Action[] { TrackMouseMovement, ClearSelection, SelectDraggingIcon, StartDrag, DragIcon, }),  // DraggingTransition(0)
                    new Transition<Action>(2, new Action[] { }),  // Esc(1)
                    new Transition<Action>(3, new Action[] { SaveDragOrigin, TrackMouseMovement, }),  // LeftButtonDown(2)
                    new Transition<Action>(4, new Action[] { SaveDragOrigin, TrackMouseMovement, }),  // LeftButtonDownOnIcon(3)
                    new Transition<Action>(2, new Action[] { StopTrackingMouse, }),  // LeftButtonUp(4)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // MouseMove(5)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // No(6)
                    new Transition<Action>(2, new Action[] { ClearSelection, DisplayStateMachineContextMenu, }),  // RightButtonUp(7)
                    new Transition<Action>(11, new Action[] { TestShiftKeyState, }),  // RightButtonUpOnIcon(8)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // Yes(9)
                },
                { // LeftButtonIsDown(3)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // DraggingTransition(0)
                    new Transition<Action>(2, new Action[] { StopTrackingMouse, }),  // Esc(1)
                    new Transition<Action>(3, new Action[] { }),  // LeftButtonDown(2)
                    new Transition<Action>(3, new Action[] { }),  // LeftButtonDownOnIcon(3)
                    new Transition<Action>(2, new Action[] { StopTrackingMouse, SelectStateMachine, }),  // LeftButtonUp(4)
                    new Transition<Action>(1, new Action[] { EnableSelectionBox, DragIcon, }),  // MouseMove(5)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // No(6)
                    new Transition<Action>(2, new Action[] { StopTrackingMouse, SelectStateMachine, DisplayStateMachineContextMenu, }),  // RightButtonUp(7)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // RightButtonUpOnIcon(8)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // Yes(9)
                },
                { // LeftButtonIsDownOnIcon(4)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // DraggingTransition(0)
                    new Transition<Action>(2, new Action[] { StopTrackingMouse, }),  // Esc(1)
                    new Transition<Action>(4, new Action[] { }),  // LeftButtonDown(2)
                    new Transition<Action>(4, new Action[] { }),  // LeftButtonDownOnIcon(3)
                    new Transition<Action>(8, new Action[] { StopTrackingMouse, TestShiftKeyState, }),  // LeftButtonUp(4)
                    new Transition<Action>(7, new Action[] { TestIfTransitionIcon, }),  // MouseMove(5)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // No(6)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // RightButtonUp(7)
                    new Transition<Action>(11, new Action[] { StopTrackingMouse, TestShiftKeyState, }),  // RightButtonUpOnIcon(8)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // Yes(9)
                },
                { // TestingIfIconSelected(5)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // DraggingTransition(0)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // Esc(1)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // LeftButtonDown(2)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // LeftButtonDownOnIcon(3)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // LeftButtonUp(4)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // MouseMove(5)
                    new Transition<Action>(9, new Action[] { TestShiftKeyState, }),  // No(6)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // RightButtonUp(7)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // RightButtonUpOnIcon(8)
                    new Transition<Action>(0, new Action[] { StartDrag, DragIcon, }),  // Yes(9)
                },
                { // TestingIfIconSelected2(6)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // DraggingTransition(0)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // Esc(1)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // LeftButtonDown(2)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // LeftButtonDownOnIcon(3)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // LeftButtonUp(4)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // MouseMove(5)
                    new Transition<Action>(2, new Action[] { SelectDraggingIcon, }),  // No(6)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // RightButtonUp(7)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // RightButtonUpOnIcon(8)
                    new Transition<Action>(2, new Action[] { DeselectDraggingIcon, }),  // Yes(9)
                },
                { // TestingIfTransition(7)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // DraggingTransition(0)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // Esc(1)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // LeftButtonDown(2)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // LeftButtonDownOnIcon(3)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // LeftButtonUp(4)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // MouseMove(5)
                    new Transition<Action>(5, new Action[] { TestIsIconSelected, }),  // No(6)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // RightButtonUp(7)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // RightButtonUpOnIcon(8)
                    new Transition<Action>(2, new Action[] { ClearSelection, SelectDraggingIcon, StopTrackingMouse, }),  // Yes(9)
                },
                { // TestingShiftKey1(8)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // DraggingTransition(0)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // Esc(1)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // LeftButtonDown(2)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // LeftButtonDownOnIcon(3)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // LeftButtonUp(4)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // MouseMove(5)
                    new Transition<Action>(2, new Action[] { ClearSelection, SelectDraggingIcon, }),  // No(6)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // RightButtonUp(7)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // RightButtonUpOnIcon(8)
                    new Transition<Action>(6, new Action[] { TestIsIconSelected, }),  // Yes(9)
                },
                { // TestingShiftKey2(9)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // DraggingTransition(0)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // Esc(1)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // LeftButtonDown(2)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // LeftButtonDownOnIcon(3)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // LeftButtonUp(4)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // MouseMove(5)
                    new Transition<Action>(0, new Action[] { ClearSelection, SelectDraggingIcon, StartDrag, DragIcon, }),  // No(6)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // RightButtonUp(7)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // RightButtonUpOnIcon(8)
                    new Transition<Action>(0, new Action[] { SelectDraggingIcon, StartDrag, DragIcon, }),  // Yes(9)
                },
                { // TestingShiftKey3(10)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // DraggingTransition(0)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // Esc(1)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // LeftButtonDown(2)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // LeftButtonDownOnIcon(3)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // LeftButtonUp(4)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // MouseMove(5)
                    new Transition<Action>(2, new Action[] { ClearSelection, SelectOccludedIcons, }),  // No(6)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // RightButtonUp(7)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // RightButtonUpOnIcon(8)
                    new Transition<Action>(2, new Action[] { SelectOccludedIcons, }),  // Yes(9)
                },
                { // TestingShiftKey4(11)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // DraggingTransition(0)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // Esc(1)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // LeftButtonDown(2)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // LeftButtonDownOnIcon(3)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // LeftButtonUp(4)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // MouseMove(5)
                    new Transition<Action>(2, new Action[] { ClearSelection, SelectDraggingIcon, DisplayIconContextMenu, }),  // No(6)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // RightButtonUp(7)
                    new Transition<Action>(0, new Action[] { base.InvalidTransition, }),  // RightButtonUpOnIcon(8)
                    new Transition<Action>(2, new Action[] { SelectDraggingIcon, DisplayIconContextMenu, }),  // Yes(9)
                },
            };
        }

        /// <summary>
        /// Invoked to execute the state machine.
        /// </summary>
        /// <param name="e">Provides an optional event type to post at normal priority before starting execution</param>

        /// <exception cref="System.InvalidOperationException">Thrown if an event is chosen for 
        /// execution and no transition from the current state maches the event.
        /// </exception>
        /// <remarks>
        /// The state machine runs until one of the following conditions is met:
        /// - There are no remaining events to process
        /// - A stop or error state is entered
        /// - An event is encountered and no transition matches the event type
        /// - An action raises an exception
        /// For each state, the next event to be processed is chosen from the head of the
        /// internal event queue, and if no event is found, then the external event queue.
        /// </remarks>
        public void Execute(EventTypes? e = null)
        {
             base.Execute(e.HasValue ? (int)e.Value : default(int?));
        }

        /// <summary>
        /// Invoked by an action routine to post an internal (high-priority) event.
        /// <param name=eventType>Identifies the event to be posted</param>
        /// <exception cref="ArgumentOutOfRangeException">If the eventType is not valid</exception>
        /// </summary>
        protected void PostHighPriorityEvent(EventTypes eventType)
        {
            PostHighPriorityEvent((int)eventType);
        }

        /// <summary>
        /// Invoked by any code to post an external (lower-priority) event.
        /// <param name=eventType>Identifies the event to be posted</param>
        /// <exception cref="ArgumentOutOfRangeException">If the eventType is not valid</exception>
        /// </summary>
        public void PostNormalPriorityEvent(EventTypes eventType)
        {
            PostNormalPriorityEvent((int)eventType);
        }
    }
}